<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<?xml-stylesheet type="text/xsl" href="callbacks.xsl"?>

<plugin name="PLUGIN_NAME" author="jerome.guzzi@idsia.ch">
    <description>A plugin to emulate Aseba nodes in CoppeliaSim</description>
    <command name="set_address">
        <description>Set the IP address on which Dashel listen for connection (by default 0.0.0.0). Should be called before creating nodes.</description>
        <params>
          <param name="address" type="string">
            <description>A valid IPv4 address</description>
          </param>
        </params>
    </command>
    <command name="create_node">
        <description>Create an Aseba node and connect it to an Aseba network. Until the first simulation step is completed, the node can be edited, adding variables, events and functions. After the first pass, its Aseba description will be freezed.</description>
        <params>
          <param name="handle" type="int">
              <description>Handle of the CoppeliaSim object</description>
          </param>
          <param name="port" type="int" default="33333">
            <description>The Aseba port number</description>
          </param>
          <param name="id" type="int" default="-1">
            <description>The Aseba node ID. Two nodes in the same Aseba network cannot have the same id. Set to -1 to choose the lowest available id.</description>
          </param>
          <param name="name" type="string" default='"node"'>
            <description>The Aseba node name, which identifies the type of devices. Two nodes in the same Aseba network can have the same name.</description>
          </param>
          <param name="friendly_name" type="string" default='""'>
            <description>A friendlier name used in Thymio Suite to label nodes. Must not be unique. If left empty, it is set to "{name}".</description>
          </param>
          <param name="uuid" type="table" item-type="int" default="{}">
            <description>An 16-byte long uuid to uniquely identify nodes in Thymio Suite: each node should have a different uuid. If left empty, the uuid is set to "coppeliasim {id}".</description>
          </param>
        </params>
        <return>
            <param name="id" type="int">
                <description>The ID assigned to the Aseba node</description>
            </param>
        </return>
    </command>
    <command name="destroy_node">
        <description>Remove an Aseba node from the Aseba network. All Aseba nodes will be eventually destroyed at the end of a simulation run, even if not explicitly requested using this callback.</description>
        <params>
            <param name="id" type="int">
                <description>The Aseba node ID.</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <!-- <command name="connect_node">
        <description>Connect a node to the aseba network</description>
        <params>
            <param name="id" type="int">
              <description>The Aseba node id</description>
            </param>
        </params>
        <return>
        </return>
    </command> -->
    <command name="set_uuid">
        <description>Set the indentifier of an Aseba node in Thymio Suite from Mobsya. Has no effect when using older clients from the Aseba community.</description>
        <params>
          <param name="id" type="int">
              <description>The Aseba node ID</description>
          </param>
          <param name="uuid" type="table" item-type="int">
            <description>An array of 16 bytes</description>
          </param>
        </params>
        <return>
        </return>
    </command>
    <command name="set_friendly_name">
        <description>Set the friendly name for an Aseba node in Thymio Suite from Mobsya. Has no effect when using older clients from the Aseba community.</description>
        <params>
          <param name="id" type="int">
              <description>The Aseba node ID</description>
          </param>
          <param name="name" type="string" >
            <description>An string shorter than 56 characters.</description>
          </param>
        </params>
        <return>
        </return>
    </command>
    <command name="add_variable">
        <description>Add an Aseba variable to a node. This is only possible after node creation, before the first simulation step. All Aseba variables are named array of a fixed number of 16-bit integers.</description>
        <params>
            <param name="id" type="int">
                <description>The Aseba node ID</description>
            </param>
            <param name="name" type="string">
                <description>The variable name</description>
            </param>
            <param name="size" type="int" default="1">
                <description>The variable size (should be larger than 0)</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="set_variable">
        <description>Set an Aseba variable. The value array should have same size of the variable and be limited to the 16-bit integers range, i.e., [-32768, 32767]. Higher bits are ignored.</description>
        <params>
            <param name="id" type="int">
                <description>The Aseba node ID</description>
            </param>
            <param name="name" type="string">
                <description>The variable name</description>
            </param>
            <param name="value" type="table" item-type="int">
                <description>The variable value</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="get_variable">
        <description>Get an Aseba variable</description>
        <params>
            <param name="id" type="int">
                <description>The Aseba node ID</description>
            </param>
            <param name="name" type="string">
                <description>The varible name</description>
            </param>
        </params>
        <return>
          <param name="value" type="table" item-type="int">
              <description>The variable value</description>
          </param>
        </return>
    </command>
    <command name="add_event">
        <description>Add an Aseba event to a node. This is only possible after node creation, before the first simulation step.</description>
        <params>
            <param name="id" type="int">
                <description>The Aseba node ID</description>
            </param>
            <param name="name" type="string">
                <description>The event name</description>
            </param>
            <param name="description" type="string">
                <description>The event description that will be publicized on the network</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="emit_event">
        <description>Emit an Aseba event.</description>
        <params>
            <param name="id" type="int">
                <description>The Aseba node ID</description>
            </param>
            <param name="name" type="string">
                <description>The event name</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="add_function">
        <description>Add an Aseba function to a node. This is only possible after node creation, before the first simulation step. When the Aseba function get called, it triggers a callback in this lua script with the same arguments.</description>
        <params>
            <param name="id" type="int">
                <description>The Aseba node ID</description>
            </param>
            <param name="name" type="string">
                <description>The function name</description>
            </param>
            <param name="description" type="string">
                <description>The function description that will be publicized on the network</description>
            </param>
            <param name="arguments" type="table" item-type="argument_t">
                <description>The function arguments, which are also publicized on the network</description>
            </param>
            <param name="callback" type="string">
                <description>The name of the lua function that implements the callback in the current script</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="list_nodes">
        <description>Get a list of simulated Aseba nodes.</description>
        <params>
            <param name="port" type="int" default="-1">
                <description>If different from -1, limit to nodes attached to that port</description>
            </param>
        </params>
        <return>
          <param name="nodes" type="table" item-type="node_t">
              <description>The list of nodes</description>
          </param>
        </return>
    </command>
    <command name="destroy_network">
        <description>Destroy all nodes of an Aseba Network and disconnect it.</description>
        <params>
            <param name="port" type="int" default="-1">
                <description>The Aseba network port. Use -1 to destroy all networks.</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="load_script">
        <description>Load an Aseba script into a node from a file.</description>
        <params>
            <param name="id" type="int">
              <description>The Aseba node ID</description>
            </param>
            <param name="path" type="string">
                <description>The path to the script file.</description>
            </param>
        </params>
        <return>
          <param name="result" type="bool">
              <description>Whether script loading was successfull.</description>
          </param>
        </return>
    </command>
    <command name="set_script">
        <description>Load an Aseba script into a node from text code. The code cannot define or use user events or constants. If you need them, please use `load_script` instead.</description>
        <params>
            <param name="id" type="int">
              <description>The Aseba node ID</description>
            </param>
            <param name="code" type="string">
                <description>The text code with the Aseba script.</description>
            </param>
        </params>
        <return>
          <param name="result" type="bool">
              <description>Whether script loading was successfull.</description>
          </param>
        </return>
    </command>
    <command name="_thymio2_create">
        <description>Instantiate a Thymio2 controller</description>
        <params>
          <param name="handle" type="int">
              <description>Handle of the Thymio2 model in CoppeliaSim</description>
          </param>
          <param name="with_aseba" type="bool" default="true">
            <description>Start emulating the Aseba firmware</description>
          </param>
          <param name="behavior_mask" type="int" default="0">
            <description>The behaviors started at init and at reset</description>
          </param>
          <param name="friendly_name" type="string" default='"Thymio II"'>
            <description>A friendlier name used in Thymio Suite to label nodes. Must not be unique. If left empty, it is set to "Thymio II".</description>
          </param>
          <param name="port" type="int" default="33333">
            <description>The Aseba port number</description>
          </param>
          <param name="id" type="int" default="-1">
            <description>The Aseba node ID. Two nodes in the same Aseba network cannot have the same id. Set to -1 to choose the lowest available id.</description>
          </param>
        </params>
        <return>
            <param name="id" type="int">
                <description>The ID assigned to the Thymio2 controller and its potential Aseba node.</description>
            </param>
        </return>
    </command>
    <command name="_thymio2_enable_accelerometer">
        <description>Enable or disable the accelerometer</description>
        <params>
          <param name="id" type="int">
            <description>The ID of the Thymio2 controller</description>
          </param>
          <param name="state" type="bool">
              <description>The state (enabled: true, disabled: false)</description>
          </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_enable_ground">
        <description>Enable, disable and configure the ground sensors</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="state" type="bool">
                <description>The state (enabled: true, disabled: false)</description>
            </param>
            <param name="red" type="bool" default="false">
                <description>Configure the sensors to respond only to the red-component of the reflecting material.</description>
            </param>
            <param name="vision" type="bool" default="false">
                <description>Configure the sensors to use vision to get the color of the reflecting material.</description>
            </param>
            <param name="max_value" type="float" default="1185.5">
                <description>Sensor model max value: at distance below x0, the response is clamped to the maximal value. Then it decreases smoothly and monotonically </description>
            </param>    
            <param name="x0" type="float" default="0.00864">
                <description>Sensor model x0: at distance below x0, the response is clamped to the maximal value. Then it decreases smoothly and monotonically. Larger values lead to a slower decrease with distance</description>
            </param>           
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_enable_proximity">
          <description>Enable, disable and configure the proximity sensors</description>
        <params>
          <param name="id" type="int">
            <description>The ID of the Thymio2 controller</description>
          </param>
          <param name="state" type="bool">
              <description>The state (enabled: true, disabled: false)</description>
          </param>
          <param name="red" type="bool" default="false">
              <description>Configure the sensors to respond only to the red-compoment of the reflecting material.</description>
          </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_enable_prox_comm">
        <description>Enable or disable the proximity communication</description>
        <params>
          <param name="id" type="int">
            <description>The ID of the Thymio2 controller</description>
          </param>
            <param name="state" type="bool">
                <description>The state (enabled: true, disabled: false)</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_set_led">
        <description>Set the color of a LED</description>
        <params>
            <param name="id" type="int">
                <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="index" type="int">
                <description>The index of the LED</description>
            </param>
            <param name="r" type="float">
                <description>Red component in [0, 1]</description>
            </param>
            <param name="g" type="float">
                <description>Green component in [0, 1]</description>
            </param>
            <param name="b" type="float">
                <description>Blue component in [0, 1]</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_set_led_intensity">
        <description>Set the color intentity of a LED</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="index" type="int">
                <description>The index of the LED</description>
            </param>
            <param name="a" type="float">
                <description>The color intensity in [0, 1]</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_get_speed">
        <description>Get the currrent angular speed of a motor</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="index" type="int">
                <description>The index of the motor (left: 0, right: 0)</description>
            </param>
        </params>
        <return>
          <param name="speed" type="float">
              <description>The angular speed in rad/s</description>
          </param>
        </return>
    </command>
    <command name="_thymio2_set_target_speed">
        <description>Set the target angular speed of a motor</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="index" type="int">
                <description>The index of the motor (left: 0, right: 0)</description>
            </param>
            <param name="speed" type="float">
                <description>The angular speed in rad/s</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_get_acceleration">
        <description>Get the current reading the accelerometer</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
        </params>
        <return>
          <param name="x" type="float">
              <description>The x-component (left) in m/s^2</description>
          </param>
          <param name="y" type="float">
              <description>The y-component (front) in m/s^2</description>
          </param>
          <param name="z" type="float">
              <description>The z-component (down) in m/s^2</description>
          </param>
        </return>
    </command>
    <command name="_thymio2_get_ground">
        <description>Get the current reading of a ground sensor</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="index" type="int">
                <description>The index of the sensor (left: 0, right: 0)</description>
            </param>
        </params>
        <return>
          <param name="reflected" type="float">
              <description>The current sensor reading</description>
          </param>
        </return>
    </command>
    <command name="_thymio2_get_proximity">
        <description>Get the current reading of a proximity sensor</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="index" type="int">
                <description>The index of the sensor</description>
            </param>
        </params>
        <return>
          <param name="reading" type="float">
              <description>The current sensor reading</description>
          </param>
        </return>
    </command>
    <command name="_thymio2_get_prox_comm_rx">
        <description>Get the last messages received by the proximity communication</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
        </params>
        <return>
          <param name="messages" type="table" item-type="prox_comm_message_t">
            <description>A table of messages, one for each sender.</description>
          </param>
        </return>
    </command>
    <command name="_thymio2_set_prox_comm_tx">
        <description>Set the integer value to be transmitted at each step if the communication is enabled. The real robot is limited to 11 bits. The simulated robot can send 32-bit integers.</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="tx" type="int">
                <description>The integer value to send.</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_get_button">
        <description>Get the current state of a button sensor</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="index" type="int">
                <description>The index of the button.</description>
            </param>
        </params>
        <return>
          <param name="value" type="bool">
              <description>Pressed: true, Released: false</description>
          </param>
        </return>
    </command>
    <command name="_thymio2_set_button">
        <description>Overwrite the current state of a button sensor</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="index" type="int">
                <description>The index of the button.</description>
            </param>
            <param name="value" type="bool">
                <description>Pressed: true, Released: false</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_set_battery_voltage">
        <description>Set the current battery voltage, which is not simulated.</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="value" type="float">
                <description>The voltage between 3.0 and 4.2 V</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_enable_behavior">
        <description>Enable or disable one of the default behaviors</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="value" type="bool">
                <description>Enabled: true, Disabled: false</description>
            </param>
            <param name="mask" type="int" default="255">
                <description>An 8 bit-mask to specify the behavior. Set it to 255 to set all behaviors</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_set_temperature">
        <description>Set the current temperature read by the sensor.</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="temperature" type="float">
                <description>A temperature in Celsius</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_set_mic_intensity">
        <description>Set the current sound intensity read by the microphone.</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="intensity" type="float">
                <description>A relative sound intensity in [0, 1].</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_set_mic_threshold">
        <description>Set the microphone threshold the trigger the mic event.</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="threshold" type="float">
                <description>A relative sound intensity in [0, 1].</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_receive_rc_message">
        <description>Notify the rc receiver of a new message.</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="address" type="int">
                <description>The 5-bit address between 0 and 31</description>
            </param>
            <param name="command" type="int">
                <description>The 6-bit command between 0 and 63</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_thymio2_enable_sd_card">
        <description>Enable/disable the SD card, emulated as a rw directory</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
            <param name="path" type="string">
                <description>The path to the directory where to store files. Set to empty to disable.</description>
            </param>
        </params>
        <return>
          <param name="enabled" type="bool">
            <description>Whether the SD card is enabled or not.</description>
          </param>
        </return>
    </command>
    <command name="_thymio2_get_sd_card">
        <description>Enable/disable the SD card, emulated as a rw directory</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the Thymio2 controller</description>
            </param>
        </params>
        <return>
          <param name="enabled" type="bool">
              <description>Whether the SD card is enabled.</description>
          </param>
          <param name="path" type="string">
              <description>The path to the directory where to store files. Set to empty to disable.</description>
          </param>
        </return>
    </command>
    <struct name="argument_t">
        <description>Description of an argument of an Aseba function used in <command-ref name="add_function"/>.</description>
        <param name="size" type="int" default="1">
            <description>The argument size</description>
        </param>
        <param name="name" type="string" default="">
            <description>The argument name</description>
        </param>
    </struct>
    <struct name="node_t">
        <description>Aseba node</description>
        <param name="port" type="int">
            <description>The port of the Aseba network the node belongs to.</description>
        </param>
        <param name="name" type="string">
            <description>The node name</description>
        </param>
        <param name="id" type="int">
            <description>The node id</description>
        </param>
    </struct>
    <struct name="prox_comm_message_t">
        <description>A proximity communication</description>
        <categories>
          <category name="thymio2"/>
        </categories>
        <param name="rx" type="int">
            <description>The value, which is equal to the non-zero payloads</description>
        </param>
        <param name="payloads" type="table" item-type="int">
            <description>The payload received by each sensor; set to 0 if the message was not recevied.</description>
        </param>
        <param name="intensities" type="table" item-type="float">
            <description>The light intensity read by each sensor; set to 0 if the message was not recevied. </description>
        </param>
    </struct>
    <enum name="_thymio2_LED" item-prefix="led_" base="0">
        <categories>
          <category name="thymio2"/>
        </categories>
        <item name="top" />
        <item name="bottom_left" />
        <item name="bottom_right" />
        <item name="button_up" />
        <item name="button_down" />
        <item name="button_left" />
        <item name="button_right" />
        <item name="circle_0" />
        <item name="circle_1" />
        <item name="circle_2" />
        <item name="circle_3" />
        <item name="circle_4" />
        <item name="circle_5" />
        <item name="circle_6" />
        <item name="circle_7" />
        <item name="front_0" />
        <item name="front_1" />
        <item name="front_2" />
        <item name="front_3" />
        <item name="front_4" />
        <item name="front_5" />
        <item name="rear_0" />
        <item name="rear_1" />
        <item name="left_red" />
        <item name="left_blue" />
        <item name="right_red" />
        <item name="right_blue" />
        <item name="ground_0" />
        <item name="ground_1" />
        <item name="battery_0" />
        <item name="battery_1" />
        <item name="battery_2" />
    </enum>
    <enum name="_thymio2_Button" item-prefix="button_" base="0">
        <categories>
            <category name="thymio2"/>
        </categories>
        <item name="backward" />
        <item name="left" />
        <item name="center" />
        <item name="forward" />
        <item name="right" />
    </enum>
    <enum name="_thymio2_Motor" item-prefix="motor_" base="0">
        <categories>
            <category name="thymio2"/>
        </categories>
        <item name="left" />
        <item name="right" />
    </enum>
    <enum name="_thymio2_Behaviors" item-prefix="behavior_" base="0">
        <categories>
            <category name="thymio2"/>
        </categories>
        <item name="battery" value="1"/>
        <item name="buttons" value="2"/>
        <item name="proximity" value="4"/>
        <item name="accelerometer" value="8"/>
        <item name="temperature" value="16"/>
        <item name="rc" value="32"/>
        <item name="mic" value="64"/>
        <item name="all" value="255"/>
    </enum>
    <command name="_epuck_create">
        <description>Instantiate a e-puck controller</description>
        <params>
          <param name="handle" type="int">
              <description>Handle of the e-puck model in CoppeliaSim</description>
          </param>
          <param name="with_aseba" type="bool" default="true">
            <description>Start emulating the Aseba firmware</description>
          </param>
          <param name="friendly_name" type="string" default='"e-puck"'>
            <description>A friendlier name used in Thymio Suite to label nodes. Must not be unique. If left empty, it is set to "e-puck".</description>
          </param>
          <param name="port" type="int" default="33333">
            <description>The Aseba port number</description>
          </param>
          <param name="id" type="int" default="-1">
            <description>The Aseba node ID. Two nodes in the same Aseba network cannot have the same id. Set to -1 to choose the lowest available id.</description>
          </param>
        </params>
        <return>
            <param name="id" type="int">
                <description>The ID assigned to the e-puck controller and its potential Aseba node.</description>
            </param>
        </return>
    </command>
    <command name="_epuck_get_speed">
        <description>Get the currrent angular speed of a motor</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the e-puck controller</description>
            </param>
            <param name="index" type="int">
                <description>The index of the motor (left: 0, right: 0)</description>
            </param>
        </params>
        <return>
          <param name="speed" type="float">
              <description>The angular speed in rad/s</description>
          </param>
        </return>
    </command>
    <command name="_epuck_set_target_speed">
        <description>Set the target angular speed of a motor</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the e-puck controller</description>
            </param>
            <param name="index" type="int">
                <description>The index of the motor (left: 0, right: 0)</description>
            </param>
            <param name="speed" type="float">
                <description>The angular speed in rad/s</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_epuck_get_acceleration">
        <description>Get the current reading the accelerometer</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the e-puck controller</description>
            </param>
        </params>
        <return>
          <param name="x" type="float">
              <description>The x-component (left) in m/s^2</description>
          </param>
          <param name="y" type="float">
              <description>The y-component (front) in m/s^2</description>
          </param>
          <param name="z" type="float">
              <description>The z-component (down) in m/s^2</description>
          </param>
        </return>
    </command>
    <command name="_epuck_get_ground">
        <description>Get the current reading of a ground sensor</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the e-puck controller</description>
            </param>
            <param name="index" type="int">
                <description>The index of the sensor (left: 0, right: 0)</description>
            </param>
        </params>
        <return>
          <param name="reflected" type="float">
              <description>The current sensor reading</description>
          </param>
        </return>
    </command>
    <command name="_epuck_get_proximity">
        <description>Get the current reading of a proximity sensor</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the e-puck controller</description>
            </param>
            <param name="index" type="int">
                <description>The index of the sensor</description>
            </param>
        </params>
        <return>
          <param name="reading" type="float">
              <description>The current sensor reading</description>
          </param>
        </return>
    </command>
    <command name="_epuck_set_mic_intensity">
        <description>Set the current sound intensities read by the microphones.</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the e-puck controller</description>
            </param>
            <param name="intensity" type="table" item-type="float">
                <description>An array of size 3 with the relative sound intensity in [0, 1].</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_epuck_set_battery_voltage">
        <description>Set the current battery voltage, which is not simulated.</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the e-puck controller</description>
            </param>
            <param name="value" type="float">
                <description>The voltage between 3.0 and 4.2 V</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_epuck_set_selector">
        <description>Set the current selector position.</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the e-puck controller</description>
            </param>
            <param name="position" type="int">
                <description>The position between 0 and 15</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_epuck_receive_rc_message">
        <description>Notify the rc receiver of a new message.</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the e-puck controller</description>
            </param>
            <param name="data" type="int">
                <description>The payload between 0 and 255</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_epuck_get_gyroscope">
        <description>Get the current reading the gyroscope</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the e-puck controller</description>
            </param>
        </params>
        <return>
          <param name="x" type="float">
              <description>The x-component in rad/s</description>
          </param>
          <param name="y" type="float">
              <description>The y-component in rad/s</description>
          </param>
          <param name="z" type="float">
              <description>The z-component in rad/s</description>
          </param>
        </return>
    </command>
    <command name="_epuck_set_ring_led">
        <description>Switch on or off one of the 8 red LED</description>
        <params>
            <param name="id" type="int">
                <description>The ID of the e-puck controller</description>
            </param>
            <param name="index" type="int">
                <description>The index of the LED (from 0 to 7)</description>
            </param>
            <param name="value" type="bool">
                <description>LED state</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_epuck_set_body_led">
        <description>Switch on or off the green body LED</description>
        <params>
            <param name="id" type="int">
                <description>The ID of the e-puck controller</description>
            </param>
            <param name="value" type="bool">
                <description>LED state</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_epuck_set_front_led">
        <description>Switch on or off the green front LED</description>
        <params>
            <param name="id" type="int">
                <description>The ID of the e-puck controller</description>
            </param>
            <param name="value" type="bool">
                <description>LED state</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_epuck_enable_accelerometer">
        <description>Enable or disable the accelerometer</description>
        <params>
          <param name="id" type="int">
            <description>The ID of the e-puck controller</description>
          </param>
          <param name="state" type="bool">
              <description>The state (enabled: true, disabled: false)</description>
          </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_epuck_enable_camera">
        <description>Enable or disable the camera</description>
        <params>
            <param name="id" type="int">
              <description>The ID of the e-puck controller</description>
            </param>
            <param name="state" type="bool">
                <description>The state (enabled: true, disabled: false)</description>
            </param>
        </params>
        <return>
        </return>
    </command>
    <command name="_epuck_enable_proximity">
          <description>Enable, disable and configure the proximity sensors</description>
        <params>
          <param name="id" type="int">
            <description>The ID of the e-puck controller</description>
          </param>
          <param name="state" type="bool">
              <description>The state (enabled: true, disabled: false)</description>
          </param>
          <param name="red" type="bool" default="false">
              <description>Configure the sensors to respond only to the red-compoment of the reflecting material.</description>
          </param>
        </params>
        <return>
        </return>
    </command>
</plugin>
