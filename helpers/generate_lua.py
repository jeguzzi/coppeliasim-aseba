# import sys
import os
import argparse
from parse import parse, escape
from model import ParamTable

# sys.path.append(os.path.join(os.environ['COPPELIASIM_ROOT_DIR'],
#                              "programming/libPlugin/simStubsGen"))

def generate_lua(directory, file, name, prefix):
    plugin = parse(os.path.join(directory, file))
    out_file = f'sim{name}-typecheck.lua'
    lua_file = f"sim{name}"
    plugin_name = plugin.name
    if not plugin_name.startswith('sim'):
        plugin_name = f'sim{plugin_name}'

    with open(os.path.join(directory, out_file), 'wt') as f:
        f.write(f"""-- sim{name} lua type-checking wrapper
-- (this file is automatically generated: do not edit)
require 'checkargs'
local sim{name}= {{}}
local function wrapFunc(funcName, wrapperGenerator)
    sim{name}[funcName]=wrapperGenerator()
end

function sim{name}.__addEnums()
    local simAseba=require('simAseba')
""")
        for enum in plugin.enums:
            if prefix not in enum.name:
                continue
            enum_name = enum.name.split(prefix)[-1]
            f.write(f"""
    sim{name}.{enum_name} =  {plugin_name}['{enum.name}']""")
        f.write(f"""
end
sim.registerScriptFuncHook('sysCall_init','sim{name}.__addEnums',true)
""")

        for cmd in plugin.commands:
            if prefix not in cmd.name:
                continue
            cmd_name = cmd.name.split(prefix)[-1]
            paramList = ','.join(p.name for p in cmd.all_params)
            f.write(f"""
wrapFunc('{cmd_name}',function()
    local simAseba=require('simAseba')
    return function(...)
        {paramList}{paramList and '=' or ''}checkargsEx(
            {{level=1}},
            {{
""")
            for p in cmd.all_params:
                f.write(f"""                    {{type='{p.dtype}'""")
                if isinstance(p, ParamTable):
                    if p.itype:
                        f.write(f""",item_type='{p.itype}'""")
                    if p.size:
                        f.write(f""",size='{p.size}'""")
                if p.nullable:
                    f.write(f""",nullable=true""")
                if p.default:
                    f.write(f""",default={p.default}""")
                f.write(f"""}},
""")
            f.write(f"""                }},
                ...
            )
            return {plugin_name}['{cmd.name}']({paramList})
        end
    end)
sim.registerScriptFunction('sim{name}.{cmd_name}@{plugin_name}', '{cmd.help_out_args_text}sim{name}.{cmd_name}({cmd.help_in_args_text}){escape(cmd.documentation)}')
""")

        f.write(f"""

sim{name}.__addEnums()
return sim{name}
""")

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate simplier interface')
    parser.add_argument('--directory', type=str, default=".",
                        help='the directory witht the autogenerated files')
    parser.add_argument('--file', type=str, default="reference.xml",
                        help='the reference xml file')
    parser.add_argument('name', type=str, help='the robot name')
    parser.add_argument('prefix', type=str, help='the robot prefix')
    args = parser.parse_args()
    generate_lua(args.directory, args.file, args.name, args.prefix)
